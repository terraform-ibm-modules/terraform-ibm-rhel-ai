# Ref: https://cloud.ibm.com/docs/secrets-manager?topic=secrets-manager-integration-ansible
---
- name: Create IAM Token
  uri:
    url: https://iam.cloud.ibm.com/identity/token
    headers:
      Content-Type: application/x-www-form-urlencoded
      Accept: application/json
    body_format: form-urlencoded
    method: POST
    body:
      grant_type: "urn:ibm:params:oauth:grant-type:apikey"
      apikey: "{{ api_key }}"
    return_content: yes 
  no_log: true 
  register: auth_response

- name: Parse IAM token
  set_fact:
    iam_token: "{{ auth_response.json.access_token }}"

- name: Fetch certificate secret
  uri:
    url: "{{ hostname_vault }}/api/v2/secrets/{{ secret_ssl_cert_id }}"
    method: GET
    headers:
      Authorization: "Bearer {{ iam_token }}"
      Accept: "application/json"
    return_content: yes
  no_log: true
  register: secret_response

- name: Parse secret data
  set_fact:
    certificate_data: "{{ secret_response.json.certificate }}"
    private_key: "{{ secret_response.json.private_key }}"
  no_log: true

- name: Create a directory for ssl
  file:
    path: /root/nginx/ssl
    state: directory
    mode: '0755'
  become: yes

- name: Save certificate to file
  copy:
    content: "{{ certificate_data }}"
    dest: "/root/nginx/ssl/certificate.crt"
    mode: '0644'

- name: Save private key to file
  copy:
    content: "{{ private_key }}"
    dest: "/root/nginx/ssl/private.key"
    mode: '0644'

- name: Create a directory for ssl
  file:
    path: /root/nginx/conf.d
    state: directory    
  become: yes

- name: Copy a https-proxy.conf file into conf.d directory
  ansible.builtin.copy:
    src: ./https-proxy.conf
    dest: /root/nginx/conf.d/

- name: Copy a https-proxy.service file into systemd user directory
  ansible.builtin.copy:
    src: ./https-proxy.service
    dest: /root/.config/systemd/user

- name: Reload the systemd manager configuration
  command: systemctl --user daemon-reload

- name: Start the https-proxy model serve systemd service
  command: systemctl --user start https-proxy.service

- name: Check that the service is running 
  command: systemctl --user status https-proxy.service
  register: https_proxy_service_status

- name: Debug print the status of the https-proxy service
  debug:
    var: https_proxy_service_status.stdout

- name: Wait for the nginx service to be available
  wait_for:
    host: 0.0.0.0
    port: 8443
    state: started
    timeout: 60
